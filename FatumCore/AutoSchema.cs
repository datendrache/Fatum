//   Jophiel - Computer Forensics Collection, Analysis and Reporting Tool
//   Copyright (C) 2006-2014 by Eric Knight

//   Copyright (C) 2003-2019 Eric Knight

using System;
using System.Collections;

namespace FatumCore
{
    public class AutoSchema
    {
        public Tree Schema = null;

        public AutoSchema(Tree DB)
        {
            Schema = new Tree();

            ArrayList fields = new ArrayList();
            recurseSchema(DB, fields);

            for (int i = 0; i < fields.Count; i++)
            {
                Tree newField = new Tree();
                newField.addElement("FieldName", (string)fields[i]);
                newField.addElement("FieldType", "String");
                newField.addElement("Description", "Autogenerated");
                Schema.addNode(newField, "Field");
            }
            fields.Clear();
        }

        ~AutoSchema()
        {
            if (Schema!=null)
            {
                Schema.dispose();
                Schema = null;
            }
        }

        private void recurseSchema(Tree currentNode, ArrayList fields)
        {
            if (currentNode != null)
            {
                int currentNodetreeCount = currentNode.tree.Count;

                for (int i = 0; i < currentNodetreeCount; i++)
                {
                    string currentLeafname = (string)currentNode.leafnames[i];
                    Tree currentTree = (Tree)currentNode.tree[i];

                    // Tricky logic- if the "value" of the Tree is not being used in the tuple,
                    //               we skip creating a column (these will appear as blanks)

                    if (currentTree.leafnames.Count == 0)
                    {
                        if (!isField(currentLeafname, fields))
                        {
                            if (!fields.Contains(currentLeafname))
                            {
                                if (!currentTree.Value.Equals(""))
                                {
                                    fields.Add(currentLeafname);
                                }
                            }
                        }
                    }
                    recurseSchema((Tree)currentNode.tree[i], fields);
                }
            }
        }

        private Boolean isField(String field, ArrayList fields)
        {
            Boolean found = false;

            int fieldsCount = 0;

            for (int i = 0; i < fieldsCount; i++)
            {
                String currentField = (string)fields[i];
                if (currentField.Equals(field))
                {
                    i = fieldsCount;
                    found = true;
                }
            }
            return found;
        }
    }
}
