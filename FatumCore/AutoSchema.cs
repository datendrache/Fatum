//   Fatum -- Metadata Processing Library
//
//   Copyright (C) 2003-2023 Eric Knight
//   This software is distributed under the GNU Public v3 License
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.

//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.

//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <https://www.gnu.org/licenses/>.

using System.Collections;

namespace Proliferation.Fatum
{
    public static class AutoSchema
    {
        public static Tree? Generate(Tree DB)
        {
            Tree? Schema = new();
            RecurseSchema(DB, Schema);
            return Schema;
        }
        
        private static void RecurseSchema(Tree currentNode, Tree fields)
        {
            if (currentNode != null)
            {
                int currentNodetreeCount = currentNode.tree.Count;

                for (int i = 0; i < currentNodetreeCount; i++)
                {
                    string currentLeafname = currentNode.leafnames[i];
                    Tree currentTree = currentNode.tree[i];

                    if (currentTree.leafnames.Count == 0 && !IgnoreField(currentLeafname, fields))
                    {
                        Tree newField = new Tree();
                        newField.AddElement("FieldName", currentLeafname);
                        newField.AddElement("FieldType", "String");
                        newField.AddElement("Description", "Autogenerated");
                        fields.AddNode(newField, "Field");
                    }
                    RecurseSchema(currentNode.tree[i], fields);
                }
            }
        }

        private static Boolean IgnoreField(String field, Tree fields)
        {
            if (string.Compare(field, "") == 0)
            {
                return true;
            }

            foreach (var currentField in fields.leafnames)
            {
                if (string.Compare(currentField, field) == 0)
                {
                    return true;
                }
            }

            return false;
        }
    }
}
